size = 1) + xlab("value") + ggtitle("Sampling distribution of 40 exponential(0.2),
(blue line is sample mean, red line is population mean)")
sampling.dist <- c()
for(i in 1:1000){
sample <- rexp(40, .2)
sample.mean <- mean(sample)
sampling.dist <- append(sampling.dist, sample.mean)
}
## 1) show where sampling.dist is centered in comparison to theoretical center of distribution
## convert sampling.dist into a dataframe with one column and 1,000 rows
df.samp.dist <- data.frame(sampling.dist)
names(df.samp.dist)[1] <- "obs"
ggplot(df.samp.dist, aes(x = obs)) + geom_density() + geom_vline(aes(xintercept = mean(obs)), color = "blue",
linetype = "dashed", size = 1) + geom_vline(aes(xintercept = 1/.2), color = "red", linetype = "dashed",
size = 1) + xlab("value") + ggtitle("Sampling distribution of 40 exponential(0.2),
(blue line is sample mean, red line is population mean)")
sampling.dist <- c()
for(i in 1:1000){
sample <- rexp(40, .2)
sample.mean <- mean(sample)
sampling.dist <- append(sampling.dist, sample.mean)
}
## 1) show where sampling.dist is centered in comparison to theoretical center of distribution
## convert sampling.dist into a dataframe with one column and 1,000 rows
df.samp.dist <- data.frame(sampling.dist)
names(df.samp.dist)[1] <- "obs"
ggplot(df.samp.dist, aes(x = obs)) + geom_density() + geom_vline(aes(xintercept = mean(obs)), color = "blue",
linetype = "dashed", size = 1) + geom_vline(aes(xintercept = 1/.2), color = "red", linetype = "dashed",
size = 1) + xlab("value") + ggtitle("Sampling distribution of 40 exponential(0.2),
(blue line is sample mean, red line is population mean)")
sampling.dist <- c()
for(i in 1:1000){
sample <- rexp(40, .2)
sample.mean <- mean(sample)
sampling.dist <- append(sampling.dist, sample.mean)
}
## 1) show where sampling.dist is centered in comparison to theoretical center of distribution
## convert sampling.dist into a dataframe with one column and 1,000 rows
df.samp.dist <- data.frame(sampling.dist)
names(df.samp.dist)[1] <- "obs"
ggplot(df.samp.dist, aes(x = obs)) + geom_density() + geom_vline(aes(xintercept = mean(obs)), color = "blue",
linetype = "dashed", size = 1) + geom_vline(aes(xintercept = 1/.2), color = "red", linetype = "dashed",
size = 1) + xlab("value") + ggtitle("Sampling distribution of 40 exponential(0.2),
(blue line is sample mean, red line is population mean)")
head(ToothGrowth)
str(ToothGrowth)
ToothGrowth
ggplot(tooth, aes(x = dose, y = len)) + geom_bar(stat = "identity") + facet_grid(supp ~ .)
tooth <- ToothGrowth
ggplot(tooth, aes(x = dose, y = len)) + geom_bar(stat = "identity") + facet_grid(supp ~ .)
ggplot(tooth, aes(x = dose, y = len)) + geom_bar(stat = "identity") + facet_grid(supp ~ .) +
ggtitle("Comparison of OJ and VC")
ggplot(tooth, aes(x = dose, y = len)) + geom_bar(stat = "identity") + facet_grid(supp ~ .) +
ggtitle("Comparison of OJ and VC Doses")
ggplot(tooth, aes(x = dose, y = mean(len)) + geom_bar(stat = "identity") + facet_grid(supp ~ .) +
ggtitle("Comparison of OJ and VC Doses")
ggplot(tooth, aes(x = dose, y = mean(len)) + geom_bar(stat = "identity") + facet_grid(supp ~ .) +
ggtitle("Comparison of OJ and VC Doses")
head(tooth)
tooth.agg <- aggregate(tooth$len, list(supp = tooth$supp), mean)
tooth.agg
tooth.agg2 <- aggregate(tooth$len, list(supp = tooth$supp, dose = tooth$dose), mean)
tooth.agg2
names(tooth.agg2)[3] <- "len"
tooth.agg2
ggplot(tooth.agg2, aes(x = dose, y = len, fill = supp) + geom_bar(stat = "identity") +
ggtitle("Comparison of OJ and VC Doses")
ggplot(tooth.agg2, aes(x = dose, y = len, fill = supp) + geom_bar(stat = "identity") +
ggtitle("Comparison of OJ and VC Doses"))
ggplot(tooth.agg2, aes(x = dose, y = len, fill = supp)) + geom_bar(stat = "identity") +
ggtitle("Comparison of OJ and VC Doses")
ggplot(tooth.agg2, aes(x = dose, y = len, fill = supp)) + geom_bar(stat = "identity", position = position_dodge()) +
ggtitle("Comparison of OJ and VC Doses")
ggplot(tooth.agg2, aes(x = dose, y = len, fill = supp)) + geom_bar(stat = "identity", position = position_dodge()) +
ggtitle("Comparison of Average Len for OJ and VC Doses")
tooth.agg2
tooth.agg
tooth
x <- data.table(tooth)
?data.table
table(tooth)
table(tooth$supp, tooth$dose)
tooth.freq <- table(tooth$supp, tooth$dose)
x <- as.data.frame(tooth.freq)
x
names(x) <- c("supp", "dose", "count")
x
tooth.freq <- table(tooth$supp, tooth$dose)
names(x) <- c("supp", "dose", "frequency")
ggplot(tooth.freq, aes(x = dose, y = count, fill = supp)) + geom_bar(stat = "identity", position = position_dodge()) +
ggtitle("Frequency of dosage by supp")
tooth.freq <- table(tooth$supp, tooth$dose)
tooth.freq <- as.data.frame(tooth.freq)
names(x) <- c("supp", "dose", "frequency")
ggplot(tooth.freq, aes(x = dose, y = count, fill = supp)) + geom_bar(stat = "identity", position = position_dodge()) +
ggtitle("Frequency of dosage by supp")
tooth.freq
names(tooth.freq) <- c("supp", "dose", "frequency")
ggplot(tooth.freq, aes(x = dose, y = count, fill = supp)) + geom_bar(stat = "identity", position = position_dodge()) +
ggtitle("Frequency of dosage by supp")
names(tooth.freq) <- c("supp", "dose", "frequency")
tooth.freq
ggplot(tooth.freq, aes(x = dose, y = frequency, fill = supp)) + geom_bar(stat = "identity", position = position_dodge()) +
ggtitle("Frequency of dosage by supp")
summary(tooth)
aggregate(tooth$len, list(supp = tooth$supp), mean)
aggregate(tooth$len, list(supp = tooth$supp, dose = tooth$dose), mean)
table(tooth$supp, tooth$dose)
ddply(tooth, c("supp", "len"), summarise, n = length(len), mean = mean(len), sd = sd(len), se = sd/sqrt(n))
library(plyr)
ddply(tooth, c("supp", "len"), summarise, n = length(len), mean = mean(len), sd = sd(len), se = sd/sqrt(n))
ddply(tooth, c("supp", "dose"), summarise, n = length(len), mean = mean(len), sd = sd(len), se = sd/sqrt(n))
table(tooth$supp, tooth$dose)
aggregate(tooth$len, list(supp = tooth$supp, dose = tooth$dose), mean)
summary(tooth)
?t.test
tooth
t.test(len ~ supp, data = tooth)
ddply(tooth, c("supp", "dose"), summarise, n = length(len), mean = mean(len), sd = sd(len), se = sd/sqrt(n))
?t.test
t.test(len ~ supp, data = tooth, var.equal = TRUE)
t.test(len ~ supp, data = tooth)
ddply(tooth, c("supp", "dose"), summarise, n = length(len), mean = mean(len), sd = sd(len), se = sd/sqrt(n))
tooth.subset <- subset(tooth, tooth$dose != 2.0)
tooth.subset
t.test(len ~ dose, data = tooth.subset)
tooth.subset <- subset(tooth, tooth$dose != 1.0)
tooth.subset
t.test(len ~ dose, data = tooth.subset)
tooth.subset <- subset(tooth, tooth$dose != 0.5)
tooth.subset
t.test(len ~ dose, data = tooth.subset)
t.test(len ~ supp, data = tooth)
tooth.subset <- subset(tooth, tooth$dose = 1.0)
tooth.subset <- subset(tooth, tooth$dose == 1.0)
t.test(len ~ supp, data = tooth.subset)
tooth.subset <- subset(tooth, tooth$dose == 2.0)
t.test(len ~ supp, data = tooth.subset)
tooth.subset <- subset(tooth, tooth$dose == 0.5)
t.test(len ~ supp, data = tooth.subset)
tooth.subset <- subset(tooth, tooth$dose == 0.5)
t.test(len ~ supp, data = tooth.subset)
tooth.subset <- subset(tooth, tooth$dose == 1.0)
t.test(len ~ supp, data = tooth.subset)
tooth <- ToothGrowth
tooth.agg2 <- aggregate(tooth$len, list(supp = tooth$supp, dose = tooth$dose), mean)
names(tooth.agg2)[3] <- "len"
ggplot(tooth.agg2, aes(x = dose, y = len, fill = supp)) + geom_bar(stat = "identity", position = position_dodge()) +
ggtitle("Comparison of average len for OJ and VC doses")
tooth.freq <- table(tooth$supp, tooth$dose)
tooth.freq <- as.data.frame(tooth.freq)
names(tooth.freq) <- c("supp", "dose", "frequency")
ggplot(tooth.freq, aes(x = dose, y = frequency, fill = supp)) + geom_bar(stat = "identity", position = position_dodge()) +
ggtitle("Frequency of dosage by supp")
qt(c(.025, .975), df=7))
qt(c(.025, .975), df=7)
-2.364624*10
2.364624*10
1100+23.64624
1100-23.64624
qt(c(.025, .975), df=8)
qt(c(.025, .975), df=8)
1100+2.306004
1100+2.306004*10
1100-2.306004*10
qt(c(.025, .975), df=8)
2.6/3
0.8666667*2.306004
2.1/3
.7/2.306004
qt(c(.025, .975), df=9)
sqrt(.68)
sqrt(10)
0.8246211/3.162278
0.2607681+2.262157
0.2607681-2.262157
0.2607681*2.262157
-2+0.5898984
-2-0.5898984
qt(c(.025, .975), df=99)
install.packages("devtools")
install_github("choroplethr", "trulia")
install.packages("choroplethr")
?choropleth
?choroplethr
?data
data(county.fips, package="maps")
install_github("choroplethr", "trulia")
library(devtools)
install_github("choroplethr", "trulia")
library(choroplethr)
?choroplethr
?county_choroplethr
?county_choropleth
install.packages("choroplethrMaps")
?choroplethrMaps
install.packages("acs")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
fit
summary(fit)
fit$Coefficients
fit$Coefficients
summary(fit)$Coefficients
summary(fit)$coefficients
mtcars
cars <- mtcars
names(cars)
fit1 <- lm(cars$mpg ~ cars$wt)
summary(fit1)
37.2851 -5.3445
mean(cars$wt)
37.2851 + (3.21725*-5.3445)
20.09051 - (2*0.5591)
confint(fit1, 'cars$wt', level=0.95)
confint(fit1, 'cars', level=0.95)
mean(cars$mpg)
mean(cars$wt)
summary(fit1)
37.2851 + (3.21725*-5.3445)
confint(fit1, "cars$mpg", level=0.95)
confint(fit1, "mpg", level=0.95)
confint(fit1, "cars", level=0.95)
confint(fit1, "cars$wt", level=0.95)
37.2851 + (3.21725*-5.3445)
confint(fit1, "cars$wt", level=0.95)
37.2851 + (3.21725*-6.486308)
-6.486308*2
37.2851 + (3.21725*-12.97262)
?mtcars
summary(fit1)
37.2851 + -5.3445(3)
37.2851 + -5.3445*3
confint(fit1, "cars$wt", level=0.95)
mean(cars$wt)
37.2851 + (3.21725*-6.486308)
?confint()
confint(fit1, "cars$mpg", level=0.95)
confint(fit1, "cars", level=0.95)
confint(fit1, cars, level=0.95)
confint(fit1)
33.450500 + (3.21725*-6.486308)
summary(fit1)
3.046*2
33.450500 + (3.21725*-6.486308)
newdata = data.frame(waiting=80)
newdata
mean(cars$wt)
car_avg_wt <- data.frame(wt = 3.21725)
predict(fit1, car_avg_wt, interval = "prediction")
car_avg_wt
predict(fit1, car_avg_wt, interval = "predict")
fit1
attach(faithful)     # attach the data frame
eruption.lm = lm(eruptions ~ waiting)
newdata = data.frame(waiting=80)
predict(eruption.lm, newdata, interval="predict")
eruption.lm
fit1
attach(cars)
fit2 <- lm(mpg ~ wt)
fit2
car_avg_wt <- data.frame(wt = 3.21725)
predict(fit1, car_avg_wt, interval = "predict")
predict(fit2, car_avg_wt, interval = "predict")
mean(wt)
car_avg_wt
fit2
33.450500 + (3.21725*-5.344)
37.285 + (3.21725*-5.344)
fit2
car_avg_wt <- data.frame(wt = 3)
car_avg_wt <- data.frame(wt = 3.21725)
car_avg_wt2 <- data.frame(wt = 3)
predict(fit2, car_avg_wt2, interval = "predict")
confint(fit2, wt, level=0.95)
fit1
summary(fit1)
confint(fit1, "cars$wt", level=0.95)
-5.3445 - (0.5591*2)
-6.486308*2
summary(fit1)
resid(fit1)
fit1_resid <- sum(resid(fit1)^2)
fit2 <- lm(mpg)
fit2
summary(fit2)
fit3 <- lm(mpg)
fit3 <- lm(mpg ~)
resid(fit1)
sum(resid(fit1))
data <- iris
library(caret)
library(ggplot2)
table(iris$Species)
head(iris)
in_train <- createDataPartition(data$Species, p = .7, list = FALSE)
training <- data[in_train, ]
testing <- data[-in_train, ]
str(training)
str(testing)
ggplot(data = training, aes(x = Petal.Width, y = Sepal.Width, color = Species)) + geom_point()
mod_fit1 <- train(Species ~ ., method = "rpart", data = training)
mod_fit1
mod_fit1$finalModel
plot(mod_fit1$finalModel, uniform = TRUE, main = "Classification Tree")
plot(mod_fit1$finalModel, uniform = TRUE, main = "Classification Tree")
mod_fit1$finalModel
plot(mod_fit1$finalModel, uniform = TRUE, main = "Classification Tree")
install.packages("rattle")
library(rattle)
fancyRpartPlot(mod_fit1$finalModel)
library(caret)
mod_fit1$finalModel
text(mod_fit1$finalModel, use.n = TRUE, all = TRUE, cex = .8)
fancyRpartPlot(mod_fit1$finalModel)
fancyRpartPlot(mod_fit1)
fancyRpartPlot(mod_fit1)
$finalModel
fancyRpartPlot(mod_fit1$finalModel)
library(rpart)
fancyRpartPlot(mod_fit1$finalModel)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(rpart)
library(caret)
library(ggplot2)
mod_fit1$finalModel
fancyRpartPlot(mod_fit1$finalModel)
library(rattle)
fancyRpartPlot(mod_fit1$finalModel)
set.seed(42)
ds     <- weather
target <- "RainTomorrow"
risk   <- "RISK_MM"
ignore <- c("Date", "Location", risk)
vars   <- setdiff(names(ds), ignore)
nobs   <- nrow(ds)
form   <- formula(paste(target, "~ ."))
train  <- sample(nobs, 0.7*nobs)
test   <- setdiff(seq_len(nobs), train)
actual <- ds[test, target]
risks  <- ds[test, risk]
model <- rpart(form, data=ds[train, vars])
fancyRpartPlot(model)
predict(mod_fit1, newdata = testing)
clear
set.seed(42)
ds     <- weather
target <- "RainTomorrow"
risk   <- "RISK_MM"
ignore <- c("Date", "Location", risk)
vars   <- setdiff(names(ds), ignore)
nobs   <- nrow(ds)
form   <- formula(paste(target, "~ ."))
train  <- sample(nobs, 0.7*nobs)
test   <- setdiff(seq_len(nobs), train)
actual <- ds[test, target]
risks  <- ds[test, risk]
# Build the model.
model <- rpart(form, data=ds[train, vars])
## Plot the model.
fancyRpartPlot(model)
install.packages("rpart.plot")
library(rpart.plot)
predict(mod_fit1, newdata = testing)
data <- iris
in_train <- createDataPartition(data$Species, p = .7, list = FALSE)
training <- data[in_train, ]
testing <- data[-in_train, ]
mod_fit1 <- train(Species ~ ., method = "rpart", data = training)
mod_fit1$finalModel
plot(mod_fit1$finalModel, uniform = TRUE, main = "Classification Tree")
text(mod_fit1$finalModel, use.n = TRUE, all = TRUE, cex = .8)
library(rattle)
fancyRpartPlot(mod_fit1$finalModel)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
head(AlzheimerDisease)
data <- AlzheimerDisease
data <- data(AlzheimerDisease)
head(data)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
head(adData)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
il_df <- training[ , 58:69]
il_df$diagnosis <- training[ , "diagnosis"]
names(il_df)
head(il_df)
summary(il_df)
fit1 <- train(diagnosis ~ ., method = "glm", data = il_df)
summary(fit1)
fit1_final_model
summary(fit1)
fit1_final_model <- fit1$finalModel
fit1_final_model
pca1 <- prcomp(il_df[ , -13], scale. = TRUE)
summary(pca1)
pca1$rotation
screeplot(pca1, type = "lines")
biplot(pca1)
fit1_final_model
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(pca1, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE) + scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
library(AppliedPredictiveModeling)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
training$row <- 1:774
cut_cement <- cut2(training$Cement, g = 3)
library(hmisc)
library(Hmisc)
cut_cement <- cut2(training$Cement, g = 3)
cut_cement
head(training)
cut_bfs <- cut2(training$BlastFurnaceSlag, g = 3)
cut_flyash <- cut2(training$FlyAsh, g = 4)
cut_age <- cut2(training$Age, g = 4)
ggplot(training, aes(x = row, y = CompressiveStrength, color = cut_flyash)) + geom_point(shape = 2)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(training, aes(x = Superplasticizer)) + geom_histogram(binwidth = .0001)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
il_df <- training[ , 58:69]
head(il_df)
pca1 <- prcomp(il_df, scale. = TRUE)
summary(pca1)
pca1$rotation
pca1$x
screeplot(pca1, type = "lines")
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
il_df <- training[ , 58:69]
il_df$diagnosis <- training[ , "diagnosis"]
il_df
il_df$diagnosis <- training[ , "diagnosis"]
head(il_df)
head(training)
names(training)
fit1 <- train(diagnosis ~ ., method = "glm", data = il_df)
summary(fit1)
fit1_final_model <- fit1$finalModel
fit1_final_model
pca1 <- prcomp(il_df[ , -13], scale. = TRUE)
summary(pca1)
pre_proc <- preProcess(il_df[ , -13], method = "pca", pcaComp = 7)
pre_proc
ildf_pc <- predict(pre_proc, il_df[ , -13])
ildf_pc
head(ildf_pc)
pc_model_fit <- train(il_df$diagnosis ~ ., method = "glm", data = ildf_pc)
summary(pc_model_fit)
pc_final_model <- pc_model_fit$finalModel
pc_model_fit$finalModel
head(il_df_test)
il_df_test <- testing[ , 58:69]
head(il_df_test)
il_df_test$diagnosis <- testing[ , "diagnosis"]
pc_test <- predict(pre_proc, il_df_test[ , -13])
head(pc_test)
head(ildf_pc)
pca1$rotation
confusionMatrix(il_df_test$diagnosis, predict(pc_model_fit, pc_test))
predict(pc_model_fit, pc_test)
pc_test_predictions <- predict(pc_model_fit, pc_test)
pc_test_predictions
fit1_predictions <- predict(fit1, newdata = il_df_test[ , -13])
confusionMatrix(fit1_predictions, il_df_test$diagnosis)
confusionMatrix(il_df_test$diagnosis, predict(pc_model_fit, pc_test))
install.packages("ggmap")
install.packages("mapproj")
library("grid")
install.packages('Rcpp')
install.packages("shiny")
library(shiny)
runExample("01_hello")
setwd("C:/Users/Steve/Desktop/R/shiny/App1")
runApp("App1")
getwd()
runApp("App1")
